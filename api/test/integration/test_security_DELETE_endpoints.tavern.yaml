---
test_name: DELETE /security/roles/{role_id}

marks:
  - base_tests

stages:

  # DELETE /security/roles/{role_id}
  - name: Try to delete a existent role
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 10
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 10
              name: !anystr
              policies: !anything
              rule: !anything
          total_affected_items: 1

  # DELETE /security/roles/1
  - name: Try to delete the admin role of the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 1
    response:
      status_code: 200
      json: &error
        data:
          affected_items: []
          failed_items:
            - error:
                code: !anyint
                message: !anystr
                remediation: !anything
              id: !anything
          total_affected_items: 0
          total_failed_items: !anyint

  # DELETE /security/roles/{non-existent role}
  - name: Try to delete a non-existent role
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 999
    response:
      status_code: 200
      json:
        <<: *error

---
test_name: DELETE /security/roles/{role_id}/policies/{policy_id}

stages:

  # DELETE /security/roles/{role_id}/policies/{policy_id}
  - name: Try to delete a existent role-policy
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles/11/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 12,15
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          failed_items:
            - error:
                code: 4010
                message: !anystr
                remediation: !anystr
              id: !anything
          total_affected_items: 1
          total_failed_items: 1
        message: !anystr

  # DELETE /security/roles/{non-existent role_id}/policies/{non-existent policy_id}
  - name: Try to delete a non-existent role-policy
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles/999/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 999
    response:
      status_code: 200
      json:
        <<: *error

  # DELETE /security/roles/{non-existent role_id}/policies/{policy_id}
  - name: Try to delete a non-existent role-policy (role non-existent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles/999/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 3
    response:
      status_code: 200
      json:
        <<: *error

  # DELETE /security/roles/{role_id}/policies/{policy_id}
  - name: Try to delete a non-existent role-policy (policy non-existent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles/3/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 999
    response:
      status_code: 200
      json:
        <<: *error

---
test_name: DELETE /security/user/{user_id}/roles/{role_id}

stages:

  # DELETE /security/user/{user_id}/roles/{role_id}
  - name: Try to delete a existent user-role
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users/normal/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 12,11
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: 2
          total_failed_items: 0

  # DELETE /security/user/{user_id}/roles/{role_id}
  - name: Try to delete a non-existent user-role
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users/no_user/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 12
    response:
      status_code: 200
      json:
        <<: *error

  # DELETE /security/user/{user_id}/roles/{role_id}
  - name: Try to delete a non-existent user-role (role non-existent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users/new_user/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 99
    response:
      status_code: 200
      json:
        <<: *error

---
test_name: DELETE /security/policies/{policy_id}

stages:

  # DELETE /security/policies/{role_id}
  - name: Try to delete a existent policy
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 12
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 12
              name: !anystr
              policy: !anything
              roles: !anything
          total_affected_items: 1

  # DELETE /security/policies/1
  - name: Try to delete the admin policy of the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 1
    response:
      status_code: 200
      json:
        <<: *error

  # DELETE /security/roles/{non-existent role}
  - name: Try to delete an inexistent policy
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 999
    response:
      status_code: 200
      json:
        <<: *error
---
test_name: DELETE /security/roles

stages:

  # DELETE /security/roles
  - name: Try to delete one existent role and no existent one
    request: &delete_roles_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 10,11
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 11
              name: !anystr
              policies: !anything
              rule: !anything
          failed_items:
            - error:
                code: 4002
                message: The specified role does not exist
                remediation: Please, create the specified role with the endpoint POST /security/roles
              id:
                - '10'
          total_affected_items: 1
          total_failed_items: 1

  # DELETE /security/roles
  - name: Try to delete all roles of the system
    request:
      verify: False
      <<: *delete_roles_request
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          total_affected_items: 0

  # DELETE /security/roles
  - name: Try to delete the administrator role
    request:
      verify: False
      <<: *delete_roles_request
      params:
        role_ids: 1
    response:
      status_code: 200
      json:
        <<: *error
---
test_name: DELETE /security/policies

stages:

  # DELETE /security/policies
  - name: Try to delete two existent policies
    request: &delete_all_policies_request
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 13,14
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 13
              name: !anystr
              policy: !anything
              roles: !anything
            - id: 14
              name: !anystr
              policy: !anything
              roles: !anything
          total_affected_items: 2

  # DELETE /security/policies
  - name: Try to delete all policies of the system
    request:
      verify: False
      <<: *delete_all_policies_request
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          total_affected_items: 0

  - name: Try to delete the administrator policy
    request:
      verify: False
      <<: *delete_all_policies_request
      params:
        policy_ids: 1
    response:
      status_code: 200
      json:
        <<: *error

---
test_name: DELETE /security/users

stages:

  - name: Delete a non-existent user
    delay_before: 10
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        usernames: nonexistent
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 5001
                message: !anystr
                remediation: !anystr
              id:
                - nonexistent
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

  - name: Delete an admin user (wazuh)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        usernames: wazuh
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 5004
                message: !anystr
                remediation: !anystr
              id:
                - wazuh
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

  - name: Delete an admin user (wazuh-wui)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        usernames: wazuh-wui
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 5004
                message: !anystr
                remediation: !anystr
              id:
                - wazuh-wui
          total_affected_items: 0
          total_failed_items: 1
        message: !anystr

  - name: Delete an existent user (with body)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        usernames: normal
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: normal
          total_affected_items: 1
        message: Users deleted correctly

  - name: Delete an existent user
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        usernames: rbac
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: rbac
          total_affected_items: 1
        message: Users deleted correctly

  - name: Delete all users in the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: administrator
              roles: []
            - username: guest
              roles: []
            - username: ossec
              roles: []
            - username: python
              roles: []
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0
        message: Users deleted correctly

---
test_name: DELETE /security/config

stages:

  # PUT /security/config
  - name: Change security configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/config"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        auth_token_exp_timeout: 3000
    response:
      status_code: 200

---
test_name: RESTORE /security/config

stages:

  # DELETE /security/roles
  - name: Restore default configuration
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/config"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200

---
test_name: CHECK /security/config

stages:

  - name: Get security configuration to check if DELETE method worked correctly
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/config"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      verify_response_with:
        - function: tavern_utils:test_response_is_different
          extra_kwargs:
            response_value: auth_token_exp_timeout
            unexpected_value: 3000

---
test_name: CLEANER DELETE /security/{policies}

stages:

  - name: Try to delete all policies
    delay_before: 10
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200

---
test_name: CLEANER DELETE /security/{roles}

stages:

  # DELETE /security/roles
  - name: Try to delete all roles
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
