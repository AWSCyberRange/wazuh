---
test_name: GET USERS RBAC

marks:
  - rbac_tests

stages:

  - name: Get all users in the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: ossec
            - username: rbac
            - username: testing
            - username: wazuh
            - username: wazuh-wui
          failed_items: []
          total_affected_items: 5
          total_failed_items: 0
        message: All specified users were shown

  - name: Get a specified user by its username (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: ossec
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: ossec
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: All specified users were shown

  - name: Get a specified user by its username (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: administrator
    response:
      status_code: 400
      json: &permission_denied
        code: 4000
        dapi_errors: !anything
        detail: !anystr
        remediation: !anystr
        status: 400
        title: Wazuh Error
        type: about:blank

  - name: Get a list of users by its username (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: wazuh,ossec,rbac
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: ossec
            - username: rbac
            - username: wazuh
          failed_items: []
          total_affected_items: 3
          total_failed_items: 0
        message: All specified users were shown

  - name: Get a list of users by its username (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: administrator,normal
    response:
      status_code: 400
      json:
        <<: *permission_denied

  - name: Get a list of users by its username (Both)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        usernames: normal,python,guest,ossec,wazuh,administrator
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: ossec
            - username: wazuh
          failed_items:
            - error:
                code: 4000
                message: 'Permission denied: Resource type: user:id'
                remediation: "Please, make sure you have permissions to execute the current request.
                For more information on how to set up permissions, please visit XXXX"
              id:
                - administrator
                - guest
                - normal
                - python
          total_affected_items: 2
          total_failed_items: 4
        message: Some users could not be shown

---
test_name: GET ROLES RBAC

stages:

  - name: Get all roles in the system
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0
        message: No role were shown

  - name: Get a specified role by its id (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        role_ids: 1
    response:
      status_code: 400
      json:
        <<: *permission_denied

---
test_name: GET POLICIES RBAC

stages:

  - name: Get all policies in the system (All denied)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: !anyint
          total_failed_items: 0
        message: All specified policies were shown


  - name: Get a specified policy by its id (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        policy_ids: 1
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: All specified policies were shown

  - name: Get a specified policy by its id (It doesn't exist but we have all the permissions on the resource policies)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        policy_ids: 999
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4007
                message: The specified policy does not exist
                remediation: Please, create the specified policy with the endpoint POST /security/policies
              id:
                - '999'
          total_affected_items: 0
          total_failed_items: 1
        message: No policy were shown

  - name: Get a list of policies by its id (Existent and no existent)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
      params:
        policy_ids: 1,2,999
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          failed_items:
            - error:
                code: 4007
                message: The specified policy does not exist
                remediation: Please, create the specified policy with the endpoint POST /security/policies
              id:
                - '999'
          total_affected_items: 2
          total_failed_items: 1
        message: Some policies could not be shown

---
test_name: GET SECURITY CONFIG

stages:

  - name: Get current security config (deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/config"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: GET
    response:
      status_code: 400
      json:
        <<: *permission_denied

---
test_name: UPDATE SECURITY CONFIG

stages:

  - name: Update default security config (deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/config"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        auth_token_exp_timeout: 3000
    response:
      status_code: 400
      json:
        <<: *permission_denied

---
test_name: UPDATE USERS RBAC

stages:

  - name: Update one specified user in the system (All allowed)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users/guest"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        password: stringA1!
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: guest
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: User modified correctly

  - name: Update one specified user in the system (All allowed)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users/python"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        password: stringA1!
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: python
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: User modified correctly

---
test_name: UPDATE ROLES RBAC

stages:

  - name: Update one specified role in the system (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles/12"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: normalUserModified
        rule:
          FIND$:
            definition: normalUserRuleModified
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 12
              name: normalUserModified
              rule:
                FIND$:
                  definition: normalUserRuleModified
              policies:
                - 12
                - 13
                - 20
              users:
                - normal
                - ossec
                - rbac
          total_affected_items: 1
          total_failed_items: 0
          failed_items: []
        message: Role updated correctly

  - name: Update one specified role in the system (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles/11"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: wazuh-wuiModified
        rule:
          FIND$:
            definition: wazuh-wuiRuleModified
    response:
      status_code: 400
      json:
        <<: *permission_denied

  - name: Update one admin role in the system (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles/1"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: wazuhModified
        rule:
          FIND$:
            definition: wazuhRuleModified
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4008
                message: !anystr
                remediation: !anything
              id:
                - '1'
          total_affected_items: 0
          total_failed_items: 1
        message: Role could not be updated

---
test_name: UPDATE POLICIES RBAC

stages:

  - name: Update one specified policy in the system (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies/14"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: administratorPolicyModified
        policy:
          actions:
            - agent:read
          effect: deny
          resources:
            - agent:id:097
            - agent:id:002
            - agent:id:003
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 14
              name: administratorPolicyModified
              policy:
                actions:
                  - agent:read
                effect: deny
                resources:
                  - agent:id:097
                  - agent:id:002
                  - agent:id:003
              roles:
                - id: 11
                  name: administrator_test
                  rule:
                    MATCH:
                      definition: administratorRule
                - id: 13
                  name: ossec
                  rule:
                    MATCH:
                      definition: ossecRule
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: Policy updated correctly

  - name: Update one specified policy in the system (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies/15"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
      json:
        name: normalPolicyModified
        policy:
          actions:
            - agent:read
          effect: allow
          resources:
            - agent:id:096
            - agent:id:002
            - agent:id:003
    response:
      status_code: 400
      json:
        <<: *permission_denied

---
test_name: CREATE LINK USER-ROLES RBAC

stages:

  - name: Create one specified link between one user and a list of roles (Allow and Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users/python/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        role_ids: 8,9,10,11,14
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: python
              roles:
                - 9
                - 8
          total_affected_items: 1
          total_failed_items: 4
          failed_items:
            - error:
                code: 4000
              id:
                - '10'
                - '11'
            - error:
                code: 4002
              id:
                - '14'
            - error:
                code: 4017
              id:
                - '9'
        message: Some roles could not be linked to user python

  - name: Create one specified link between one user and a list of roles (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users/ossec/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        role_ids: 8,12
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - roles:
                - 9
                - 12
                - 8
              username: ossec
          failed_items:
            - error:
                code: 4017
                message: !anystr
                remediation: !anything
              id:
                - '12'
          total_affected_items: 1
          total_failed_items: 1

---
test_name: CREATE USERS RBAC

stages:

  - name: Create one specified user (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        username: newUser
        password: stringA1!
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: newUser
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: User created correctly

---
test_name: CREATE ROLES AND POLICIES RBAC

stages:

  - name: Create one specified role (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: newUserRole
        rule:
          FIND$:
            definition: newUser
    response:
      status_code: 400
      json:
        <<: *permission_denied

  - name: Create one specified policy (Deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      json:
        name: newUserPolicy
        policy:
          actions:
            - security:delete
          effect: allow
          resources:
            - role:id:*
            - policy:id:*
    response:
      status_code: 400
      json:
        <<: *permission_denied

---
test_name: DELETE LINK ROLE-POLICIES RBAC

stages:

  - name: Delete one specified link between one user and a list of roles (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users/rbac/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 8,11,12,10,9,5
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - roles: []
              username: rbac
          failed_items:
            - error:
                code: 4016
                message: !anystr
                remediation: !anystr
              id:
                - '5'
                - '8'
                - '9'
          total_affected_items: 3
          total_failed_items: 3

---
test_name: CREATE LINK ROLE-POLICIES RBAC

stages:

  - name: Create one specified link between one role and a list of policies (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles/12/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: POST
      params:
        policy_ids: 15,16,17
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 12
              name: normalUserModified
              rule:
                FIND$:
                  definition: normalUserRuleModified
              policies:
                - 12
                - 13
                - 20
                - 16
                - 17
              users:
                - normal
                - ossec
          total_affected_items: 2
          total_failed_items: 1
          failed_items:
            - error:
                code: 4000
                message: 'Permission denied: Resource type: policy:id'
                remediation: "Please, make sure you have permissions to execute the current request.
                For more information on how to set up permissions, please visit XXXX"
              id:
                - '15'
        message: Some policies could not be linked to role 12

---
test_name: DELETE LINK ROLE-POLICIES RBAC

stages:

  - name: Delete one specified link between one role and a list of policies (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles/12/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 15,16,17
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 12
              name: normalUserModified
              rule:
                FIND$:
                  definition: normalUserRuleModified
              policies:
                - 12
                - 13
                - 20
              users:
                - normal
                - ossec
          total_affected_items: 2
          total_failed_items: 1
          failed_items:
            - error:
                code: 4010
                message: The specified role-policy does not exist
                remediation: !anystr
              id:
                - '15'
        message: Some policies could not be unlinked from role 12

---
test_name: DELETE USERS RBAC

stages:

  - name: Delete one specified user in the system (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        usernames: administrator
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: administrator
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: Users deleted correctly

  - name: Delete all allowed user in the system (All)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - username: newUser
            - username: ossec
            - username: python
            - username: rbac
          failed_items: []
          total_affected_items: 4
          total_failed_items: 0
        message: Users deleted correctly

  - name: Delete all allowed user in the system (All)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items: []
          total_affected_items: 0
          total_failed_items: 0
        message: No user was deleted

  - name: Delete a list of users in the system (Allow and deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/users"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        usernames: wazuh,administrator,guest
    response:
      status_code: 200
      json:
        data:
          affected_items: []
          failed_items:
            - error:
                code: 4000
                message: !anystr
                remediation: !anystr
              id:
                - guest
            - error:
                code: 5001
                message: !anystr
                remediation: !anystr
              id:
                - administrator
            - error:
                code: 5004
                message: !anystr
                remediation: !anystr
              id:
                - wazuh
          total_affected_items: 0
          total_failed_items: 3

---
test_name: DELETE ROLES RBAC

stages:

  - name: Delete one specified role in the system (Allow)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        role_ids: 11
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 11
              name: administrator_test
              rule:
                MATCH:
                  definition: administratorRule
              policies:
                - 15
                - 14
              users:
                - normal
          total_affected_items: 1
          total_failed_items: 0
          failed_items: []
        message: All specified roles were deleted

  - name: Delete all roles in the system (Allow and deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/roles"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: 6
          total_failed_items: 0
        message: All specified roles were deleted

---
test_name: DELETE POLICIES RBAC

stages:

  - name: Delete one specified policy in the system (Allow)
    delay_before: 5
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
      params:
        policy_ids: 14
    response:
      status_code: 200
      json:
        data:
          affected_items:
            - id: 14
              name: administratorPolicyModified
              policy:
                actions:
                  - agent:read
                effect: deny
                resources:
                  - agent:id:097
                  - agent:id:002
                  - agent:id:003
              roles: []
          failed_items: []
          total_affected_items: 1
          total_failed_items: 0
        message: All specified policies were deleted

  - name: Delete all policies in the system (Allow and deny)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/policies"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: DELETE
    response:
      status_code: 200
      json:
        data:
          affected_items: !anything
          failed_items: []
          total_affected_items: 18
          total_failed_items: 0
        message: All specified policies were deleted

---
test_name: REVOKE TOKENS RBAC

stages:

  - name: Revoke all tokens (Allowed)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/user/revoke"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
    response:
      status_code: 200

  - name: Revoke all tokens (Invalid token after previous call)
    request:
      verify: False
      url: "{protocol:s}://{host:s}:{port:d}/{version:s}/security/user/revoke"
      headers:
        Authorization: "Bearer {test_login_token}"
      method: PUT
    response:
      status_code: 401
